// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "featuretag")]
    public partial class AFeatureWithoutRetriesFeature : Xunit.IClassFixture<AFeatureWithoutRetriesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FeatureWithoutRetry.feature"
#line hidden
        
        public AFeatureWithoutRetriesFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "A feature without retries", null, ProgrammingLanguage.CSharp, new string[] {
                        "featuretag"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(AFeatureWithoutRetriesFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "A feature without retries")]
        [Xunit.TraitAttribute("Description", "Try do something a few times")]
        [Xunit.TraitAttribute("Category", "scenariotag")]
        [Xunit.TraitAttribute("Category", "retry(7)")]
        [Xunit.RetryFactAttribute(7)]
        public virtual void TryDoSomethingAFewTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try do something a few times", new string[] {
                        "scenariotag",
                        "retry(7)"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.When("I try something", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "A feature without retries")]
        [Xunit.TraitAttribute("Description", "Try do something with default times")]
        [Xunit.TraitAttribute("Category", "retry")]
        [Xunit.RetryFactAttribute(3)]
        public virtual void TryDoSomethingWithDefaultTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try do something with default times", new string[] {
                        "retry"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.When("I try something 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "A feature without retries")]
        [Xunit.TraitAttribute("Description", "This will try only once")]
        [Xunit.FactAttribute()]
        public virtual void ThisWillTryOnlyOnce()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("This will try only once", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.When("I do something", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AFeatureWithoutRetriesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AFeatureWithoutRetriesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
